Hidden Password

  The first interesting fact of note is that the program header relating to the
stack is marked executable. Simple "defeat" of the binary is to change the
program header value to Read/Write or 6 (Read = 4, Write = 2). The fact the
stack is executable (Executable = 1), is a hint to the binary potentially
jumping to addresses on the stack to be executed. 

  The entry point is at 0x1070 but the actual main function is at 0x119a. For
GCC compiled binaries, main will usually be the address pushed to the stack for
32 bit binaries or the address loaded into RDI for 64 bit binaries before
__libc_start_main is called and the x86 HALT instruction is encountered.

  Inside the main function the EDI and RSI register are copied to stack
addresses. The EDI register corresponds to argc and RSI register is the argv
parameter in the main signature, int main(int argc, char **argv). This is
another hint that the binary is expecting command line arguments to main.

  After the command line arguments are copied to the stack, 197 bytes are
copied to the stack. The starting address of the 197 bytes is also copied to
a stack address. This is a C pointer.  

  As expected, argc is compared to 2 and if it is not equal a usage is printed
and the binary hands control back to the OS and returns a value of 1.

  Signed integer max is moved to a variable in stack space and an algorithm
that uses the the command line argument calculates a value. The algorithm
iterates through the every character (byte) in the second command line argument
string. Each byte is multiplied by the current index in the loop iteration and
added to the signed integer variable that was initialized to signed integer max
before the loop was entered.

  Two unsigned short (2 bytes) arrays of 6 elements each have values assigned
to each of their elements. Both arrays are on the stack. Another loop is 
entered. This loop is used to verify that the value calculated in the previous
loop is correct. The algorithm iterates through each element of the 6 element
arrays and performs the logic check that the value calculated modulo the first
unsigned short array element is equal to the second unsigned short array
element. If the check passes all six execution continues. If it does not an
"Invalid password!" message is printed to the terminal.

  A function is entered that places the calculated value into the .data section
of the file.

  A loop is entered that will act as a decryption algorithm for the 197 bytes
that were placed on the stack at the start of main. Each iteration enters a
function that runs the calculated value, now in the .data section, through
a couple arithmetic operations and bitwise operations. The value is first
multiplied by 0x41c64e6d. The product has 0x3039 added to it. The resulting
sum at this point is stored back in the .data section. The resulting sum is
shifted right 16 times and a bitwise AND is peformed with 0x7fff. The resulting
value is returned.

  The return value has its least significant byte moved to a stack address.
This byte is then XOR'd with the 197 bytes at the respective loop iteration
index. The result of the XOR is stored at the same location as the byte of the
197 bytes.

  Once all 197 bytes have been XOR'd, another loop is entered that calculates
something equivalent to a checksum. All 197 bytes, are multiplied by the loop
index. The product is then added to a value, 4 bytes, that is initialized to
zero before entering the loop. The final value after the loop is compared to
0x201b0f. If it is equal the binary continues execution. If is not equal the
program prints the "Invalid Password!" messages and exits with a 0 return
value.

  The decrypted 197 bytes are then jumped to by way of the pointer that was
created at the beginning of main. The second command line argument and its
string length are the input values to this "function." 

  Inside the decrypted function, two strings are place on the stack. A third
has zeroes placed in its bytes. The length of all 3 strings are 14 bytes. The
length of the second command line argument is checked against the value 14.
If it is not equal, a zero is returned from the function.

  A loop is entered that functions as a password checking algorithm. The second
command line argument is XOR'd by the first string put on the stack. That
resulting value is placed is the originally zeroed out third string. That value
is then compared for equality against the second string on the stack. If all
bytes are equal in the loop a 1 is returned from the function. If a byte found
to not be equal a 0 is returned from the function. Note, the loop is exited
when a byte is not equal.

  Going back to the original code, the return value is compared to 0. If it is
zero the "Invalid Password!" message is printed to the terminal. If it is 1,
a "Good password!" message is printed. After printing the messages the binary
returns exit code of 1.
